{"version":3,"file":"static/js/186.5bfac0aa.chunk.js","mappings":"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","sources":["../node_modules/@ionic/core/components/index8.js","../node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { c as componentOnReady } from './helpers.js';\nimport { b as printRequiredElementError } from './index6.js';\n\nconst ION_CONTENT_TAG_NAME = 'ION-CONTENT';\nconst ION_CONTENT_ELEMENT_SELECTOR = 'ion-content';\nconst ION_CONTENT_CLASS_SELECTOR = '.ion-content-scroll-host';\n/**\n * Selector used for implementations reliant on `<ion-content>` for scroll event changes.\n *\n * Developers should use the `.ion-content-scroll-host` selector to target the element emitting\n * scroll events. With virtual scroll implementations this will be the host element for\n * the scroll viewport.\n */\nconst ION_CONTENT_SELECTOR = `${ION_CONTENT_ELEMENT_SELECTOR}, ${ION_CONTENT_CLASS_SELECTOR}`;\nconst isIonContent = (el) => el.tagName === ION_CONTENT_TAG_NAME;\n/**\n * Waits for the element host fully initialize before\n * returning the inner scroll element.\n *\n * For `ion-content` the scroll target will be the result\n * of the `getScrollElement` function.\n *\n * For custom implementations it will be the element host\n * or a selector within the host, if supplied through `scrollTarget`.\n */\nconst getScrollElement = async (el) => {\n  if (isIonContent(el)) {\n    await new Promise((resolve) => componentOnReady(el, resolve));\n    return el.getScrollElement();\n  }\n  return el;\n};\n/**\n * Queries the element matching the selector for IonContent.\n * See ION_CONTENT_SELECTOR for the selector used.\n */\nconst findIonContent = (el) => {\n  /**\n   * First we try to query the custom scroll host selector in cases where\n   * the implementation is using an outer `ion-content` with an inner custom\n   * scroll container.\n   */\n  const customContentHost = el.querySelector(ION_CONTENT_CLASS_SELECTOR);\n  if (customContentHost) {\n    return customContentHost;\n  }\n  return el.querySelector(ION_CONTENT_SELECTOR);\n};\n/**\n * Queries the closest element matching the selector for IonContent.\n */\nconst findClosestIonContent = (el) => {\n  return el.closest(ION_CONTENT_SELECTOR);\n};\n/**\n * Scrolls to the top of the element. If an `ion-content` is found, it will scroll\n * using the public API `scrollToTop` with a duration.\n */\n// TODO(FW-2832): type\nconst scrollToTop = (el, durationMs) => {\n  if (isIonContent(el)) {\n    const content = el;\n    return content.scrollToTop(durationMs);\n  }\n  return Promise.resolve(el.scrollTo({\n    top: 0,\n    left: 0,\n    behavior: durationMs > 0 ? 'smooth' : 'auto',\n  }));\n};\n/**\n * Scrolls by a specified X/Y distance in the component. If an `ion-content` is found, it will scroll\n * using the public API `scrollByPoint` with a duration.\n */\nconst scrollByPoint = (el, x, y, durationMs) => {\n  if (isIonContent(el)) {\n    const content = el;\n    return content.scrollByPoint(x, y, durationMs);\n  }\n  return Promise.resolve(el.scrollBy({\n    top: y,\n    left: x,\n    behavior: durationMs > 0 ? 'smooth' : 'auto',\n  }));\n};\n/**\n * Prints an error informing developers that an implementation requires an element to be used\n * within either the `ion-content` selector or the `.ion-content-scroll-host` class.\n */\nconst printIonContentErrorMsg = (el) => {\n  return printRequiredElementError(el, ION_CONTENT_ELEMENT_SELECTOR);\n};\n/**\n * Several components in Ionic need to prevent scrolling\n * during a gesture (card modal, range, item sliding, etc).\n * Use this utility to account for ion-content and custom content hosts.\n */\nconst disableContentScrollY = (contentEl) => {\n  if (isIonContent(contentEl)) {\n    const ionContent = contentEl;\n    const initialScrollY = ionContent.scrollY;\n    ionContent.scrollY = false;\n    /**\n     * This should be passed into resetContentScrollY\n     * so that we can revert ion-content's scrollY to the\n     * correct state. For example, if scrollY = false\n     * initially, we do not want to enable scrolling\n     * when we call resetContentScrollY.\n     */\n    return initialScrollY;\n  }\n  else {\n    contentEl.style.setProperty('overflow', 'hidden');\n    return true;\n  }\n};\nconst resetContentScrollY = (contentEl, initialScrollY) => {\n  if (isIonContent(contentEl)) {\n    contentEl.scrollY = initialScrollY;\n  }\n  else {\n    contentEl.style.removeProperty('overflow');\n  }\n};\n\nexport { ION_CONTENT_CLASS_SELECTOR as I, findClosestIonContent as a, ION_CONTENT_ELEMENT_SELECTOR as b, scrollByPoint as c, disableContentScrollY as d, findIonContent as f, getScrollElement as g, isIonContent as i, printIonContentErrorMsg as p, resetContentScrollY as r, scrollToTop as s };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nconst SCROLL_AMOUNT_PADDING = 50;\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  }\n  else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\n   * Scroll padding should only be added if:\n   * 1. The global scrollPadding config option\n   * is set to true.\n   * 2. The native keyboard resize mode is either \"none\"\n   * (keyboard overlays webview) or undefined (resize\n   * information unavailable)\n   * Resize info is available on Capacitor 4+\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\n   * When the input is about to receive\n   * focus, we need to move it to prevent\n   * mobile Safari from adjusting the viewport.\n   */\n  const focusIn = async () => {\n    /**\n     * Scroll assist should not run again\n     * on inputs that have been manually\n     * focused inside of the scroll assist\n     * implementation.\n     */\n    if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n      inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n      return;\n    }\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput);\n  };\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n  };\n};\n/**\n * Use this function when you want to manually\n * focus an input but not have scroll assist run again.\n */\nconst setManualFocus = (el) => {\n  /**\n   * If element is already focused then\n   * a new focusin event will not be dispatched\n   * to remove the SKIL_SCROLL_ASSIST attribute.\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    setManualFocus(inputEl);\n    /**\n     * Even though the input does not need\n     * scroll assist, we should preserve the\n     * the scroll padding as users could be moving\n     * focus from an input that needs scroll padding\n     * to an input that does not need scroll padding.\n     * If we remove the scroll padding now, users will\n     * see the page jump.\n     */\n    if (enableScrollPadding && contentEl !== null) {\n      setScrollPadding(contentEl, currentPadding);\n      setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n    }\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  setManualFocus(inputEl);\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /**\n   * If enabled, we can add scroll padding to\n   * the bottom of the content so that scroll assist\n   * has enough room to scroll the input above\n   * the keyboard.\n   */\n  if (enableScrollPadding && contentEl) {\n    currentPadding = scrollData.scrollPadding;\n    setScrollPadding(contentEl, currentPadding);\n  }\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      setManualFocus(inputEl);\n      /**\n       * When the input is about to be blurred\n       * we should set a timeout to remove\n       * any scroll padding.\n       */\n      if (enableScrollPadding) {\n        setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n      }\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  /**\n   * Grab the native keyboard resize configuration\n   * and pass it to scroll assist. Scroll assist requires\n   * that we adjust the input right before the input\n   * is about to be focused. If we called `Keyboard.getResizeMode`\n   * on focusin in scroll assist, we could potentially adjust the\n   * input too late since this call is async.\n   */\n  const keyboardResizeMode = await Keyboard.getResizeMode();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"names":["ION_CONTENT_ELEMENT_SELECTOR","ION_CONTENT_CLASS_SELECTOR","ION_CONTENT_SELECTOR","concat","isIonContent","el","tagName","getScrollElement","_x","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Promise","resolve","componentOnReady","abrupt","stop","apply","arguments","findClosestIonContent","closest","scrollToTop","durationMs","scrollTo","top","left","behavior","scrollByPoint","x","y","scrollBy","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","length","undefined","disabledClonedInput","has","addClone","removeClone","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","input","getRootNode","activeElement","onBlur","hideCaret","showCaret","addEventListener","removeEventListener","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","doc","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","setTimeout","blur","getScrollData","contentEl","keyboardHeight","_a","itemEl","calcScrollData","getBoundingClientRect","defaultView","innerHeight","inputRect","contentRect","platformHeight","inputTop","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setClearScrollPaddingListener","doneCallback","once","currentPadding","SKIP_SCROLL_ASSIST","enableScrollAssist","footerEl","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","mode","KeyboardResize","None","focusIn","hasAttribute","removeAttribute","jsSetFocus","setManualFocus","setAttribute","focus","_x2","_x3","_x4","_x5","_x6","_ref2","_callee3","scrollData","_ref3","scrollContentTimeout","scrollContent","doubleKeyboardEventListener","totalScrollAmount","_args3","_context3","raf","click","window","_callee2","_context2","sent","scrollHeight","clientHeight","scrollTop","type","startInputShims","_x7","_x8","_ref4","_callee5","config","platform","_ref5","isIOS","isAndroid","scrollAssist","inputBlurring","inputs","hideCaretMap","scrollAssistMap","keyboardResizeMode","registerInput","unregisterInput","_i","_inputs","_context5","getNumber","getBoolean","Array","from","querySelectorAll","Keyboard","getResizeMode","_x9","_callee4","inputRoot","rmFn","_rmFn","_context4","shadowRoot","querySelector","fn","detail"],"sourceRoot":""}